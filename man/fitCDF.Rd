% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fitCDF.R
\name{fitCDF}
\alias{fitCDF}
\alias{cdf_crossval}
\alias{fitCDF,numeric-method}
\alias{fitCDF,list_OR_matrix_OR_dataframe-method}
\alias{coef}
\alias{coef.default}
\alias{coef.nls.lm}
\alias{coef.CDFmodel}
\alias{coef.CDFmodelList}
\title{Nonlinear fit of a commulative distribution function}
\usage{
fitCDF(varobj, ...)

\S4method{fitCDF}{numeric}(
  varobj,
  distNames,
  plot = FALSE,
  plot.num = 1L,
  distf = NULL,
  start = NULL,
  loss.fun = c("linear", "huber", "smooth", "cauchy", "arctg"),
  min.val = NULL,
  only.info = FALSE,
  maxiter = 1024,
  maxfev = 1e+05,
  ptol = 1e-12,
  nls.model = FALSE,
  algorithm = "default",
  xlabel = "x",
  mar = c(4, 4, 3, 1),
  mgp = c(2.5, 0.6, 0),
  las = 1,
  cex.main = 1,
  cex.text = 0.8,
  cex.point = 0.5,
  verbose = TRUE,
  ...
)

\S4method{fitCDF}{list_OR_matrix_OR_dataframe}(
  varobj,
  distNames,
  plot = FALSE,
  plot.num = 1,
  distf = NULL,
  start = NULL,
  loss.fun = c("linear", "huber", "smooth", "cauchy", "arctg"),
  only.info = FALSE,
  maxiter = 1024,
  maxfev = 1e+05,
  ptol = 1e-12,
  xlabel = "x",
  mar = c(4, 4, 3, 1),
  mgp = c(2.5, 0.6, 0),
  las = 1,
  cex.main = 1,
  cex.text = 0.8,
  cex.point = 0.5,
  num.cores = 1L,
  tasks = 0L,
  verbose = TRUE,
  ...
)

coef(object, ...)

\method{coef}{default}(object, ...)

\method{coef}{nls.lm}(object)

\method{coef}{CDFmodel}(object)

\method{coef}{CDFmodelList}(object)
}
\arguments{
\item{varobj}{A a vector, a named list, a matrix or a data.frame, containing
the observations from the variable for which the CDF parameters will be
estimated. When the argument is a matrix or a data.frame, the columns must be
named, carrying the objective variables.}

\item{...}{(Optional) Further graphical parameters (see
\code{\link[graphics]{par}}). Graphical parameter will simultaneously affect
all the plots.}

\item{distNames}{a vector of distribution numbers to select from the listed
below in details section, e.g. c(1:10, 15). If 'distNames' is not any of
current 20 named distributions, then it can be any arbitrary character
string, but the argument 'distf' must be given (see below).}

\item{plot}{Logical. Default FALSE Whether to produce the plots for the best
fitted CDF.}

\item{plot.num}{The number of distributions to be plotted.}

\item{distf}{A character string naming a cumulative distribution function(s)
(CDF) present in the R session environment . For example, \strong{gamma} or
\strong{norm}, etc, from where, internally, we can get: density, distribution
function, quantile function and random generation as: \strong{dnorm},
\strong{pnorm}, \strong{qnorm}, and \strong{rnorm}, respectively. If the
function is not present in the environment, then an error will be returned.
It must given only if 'distNames' is not any of current 20 named
distributions (see  details below). Default is NULL.}

\item{start}{A named numerical vector giving the parameters to be optimized
with initial values or a list of numerical vectors (only when
\emph{\strong{varobj}} is a list, a matrix or a data.frame). This can be
omitted for some of the named distributions (see Details). This argument will
be used if provided for only one distribution. The default parameter values
are:
\enumerate{
    \item norm = c( mean = MEAN, sd = SD )
    \item lnorm = c(meanlog = mean( log1p(X), na.rm = TRUE),
            sdlog = sd( log1p( X ), na.rm = TRUE))
    \item hnorm = c(theta = sqrt(pi)/(SD*sqrt(2)))
    \item gnorm = c( mean = MEAN, sigma = SD, beta = 2)
    \item tgnorm = c( mean = MEAN, sigma = SD, beta = 2)
    \item laplace = c( mean = MEAN, sigma = sqrt( VAR))
    \item gamma = c( shape = MEAN^2/VAR, rate = MEAN/VAR)
    \item gamma3p = c( shape = MEAN^2/VAR, rate = MEAN/VAR, mu = 0),
    \item ggamma = c(alpha = MEAN^2/VAR, scale = VAR/MEAN, mu = MIN,
                        psi = 1)
    \item ggamma = c( alpha = MEAN^2/VAR, scale = VAR/MEAN, psi = 1)
    \item weibull = c( shape = log( 2 ), scale = Q)
    \item weibull3p = c( mu = MIN, shape = log( 2 ), scale = Q)
    \item beta = c(shape1 = 1, shape2 = 2)
    \item beta3 = c(shape1 = 1, shape2 = 2, a = MIN)
    \item beta4 = c(shape1 = 2, shape2 = 3, a=0.9 * MIN, b=1.1 * MAX)
    \item bweibull = c(alpha=1, beta=2, shape = log( 2 ), scale = Q)
    \item gbeta = c( shape1 = 1, shape2 = 2, lambda = 1)
    \item rayleigh = c( sigma = SD )
    \item exp = c( rate = 1)
    \item exp2 = c( rate = 1, mu = 0)
    \item geom = c(prob = ifelse(MEAN > 0, 1/(1 + MEAN), 1))
}}

\item{loss.fun}{Loss function(s) used in the regression (see
\href{https://en.wikipedia.org/wiki/Loss_function}{(Loss function)}). After
\eqn{z =  1/2 * sum((f(x) - y)^2)} we have:
\enumerate{
    \item "linear": linear function which gives a standard least squares:
          \eqn{loss(z) = z}.
    \item "huber": Huber loss, \eqn{loss(z) = ifelse(z <= 1, z, sqrt(z) -1)}.
    \item "smooth": Smooth approximation to the sum of residues absolute
          values: \eqn{loss(z) = 2*(sqrt(z + 1) - 1)}.
    \item "cauchy": Cauchy loss: \eqn{loss(z) = log(z + 1)}.
    \item "arctg": arc-tangent loss function: \eqn{loss(x) = atan(z)}.
}}

\item{min.val}{A number denoting the lower bound of the domain where CDF
is defined. For example, for Weibull and GGamma \strong{\emph{min.val = 0}}.}

\item{only.info}{Logic. Default TRUE. If true, only information about the
parameter estimation is returned.}

\item{maxiter, maxfev, ptol}{Parameters to control of various aspects of the
Levenberg-Marquardt algorithm through function
\code{\link[minpack.lm]{nls.lm.control}} from *minpack.lm* package.}

\item{nls.model}{Logical. Whether to return the best fitted model as an
object from \strong{nlsModel} class. Default is FALSE. If TRUE, then
the estimated parameters are used new fitting with \code{\link[stats]{nls}}
function.}

\item{algorithm}{Only if \strong{nls.model} = TRUE. The same as for
\code{\link[stats]{nls}} function.}

\item{xlabel}{(Optional) Label for variable \strong{\emph{varobj}}.
Default is \emph{xlabel = "x"}.}

\item{mar, mgp, las, cex.main}{(Optional) Graphical parameters (see
\code{\link[graphics]{par}}).}

\item{cex.text, cex.point}{Numerical value to scale text and points.}

\item{verbose}{Logic. If TRUE, prints the function log to stdout}

\item{num.cores, tasks}{Parameters for parallel computation using package
\code{\link[BiocParallel]{BiocParallel-package}}: the number of cores to use,
i.e. at most how many child processes will be run simultaneously (see
\code{\link[BiocParallel]{bplapply}} and the number of tasks per job (only
for Linux OS).}

\item{object}{An object for which the extraction of model coefficients
is meaningful.}
}
\value{
After return the plots, a list with following values is provided:
    \itemize{
        \item aic: Akaike information creterion
        \item fit: list of results of fitted distribution, with parameter
            values
        \item bestfit: the best fitted distribution according to AIC
        \item fitted: fitted values from the best fit
        \item rstudent: studentized residuals
        \item residuals: residuals
    }
    After cdf = fitCDF( varobj, ...), attributes( cdf$bestfit ) shows the
    list of objects carry on cdf$bestfit:
     \itemize{
        \item $names
              [1] "par" "hessian" "fvec" "info" "message" "diag" "niter"
                  "rsstrace"  "deviance"

        \item $class
              [1] "nls.lm"
     }

And fitting details can be retrieved with summary(cdf$bestfit)
}
\description{
Usually the parameter estimation of a cumulative distribution
function (*CDF*) are accomplished using the corresponding probability density
function (*PDF*). Different optimization algorithms can be used to
accomplished this task and different algorithms can yield different estimated
parameters. Hence, why not try to fit the CDF directly?

See \code{\link[stats]{coef}}.
}
\details{
The nonlinear fit (NLF) problem for CDFs is addressed with
Levenberg-Marquardt algorithm implemented in function
\code{\link[minpack.lm]{nls.lm}} from package *minpack.lm*. The Stein's rho
for adjusted R squared (rho) is applied as an estimator of the average
cross-validation predictive power [1]. This function is inspired in a script
for the function \code{\link[propagate]{fitDistr}} from the package propagate
[2]. Some parts or script ideas from function
\code{\link[propagate]{fitDistr}} are used, but here we to estimate CDF and
not the PDF as in the case of "\code{\link[propagate]{fitDistr}}. More
informative results are given now. The studentized residuals are provided as
well. The list (so far) of possible CDFs is:
    \enumerate{
        \item Normal \href{https://goo.gl/xaEAdT}{(Wikipedia)}
        \item Log-normal \href{https://goo.gl/a7MtYq}{(Wikipedia)}
        \item Half-normal \href{https://goo.gl/yxMF6T}{(Wikipedia)}. An
            Alternatively using a scaled precision (inverse of the variance)
            parametrization (to avoid issues if \eqn{\sigma} is near zero),
            obtained by setting \eqn{\theta=sqrt(\pi)/\sigma*sqrt(2)}.
        \item Generalized Normal \href{https://goo.gl/EPk8mH}{(Wikipedia)}
        \item T-Generalized Normal [3].
        \item Laplace \href{https://goo.gl/fCykV9}{(Wikipedia)}
        \item Gamma \href{https://goo.gl/cYkvar}{(Wikipedia)}
        \item 3P Gamma [4].
        \item Generalized 4P Gamma [4]
                \href{https://goo.gl/1n4kpW.}{(Wikipedia)}
        \item Generalized 3P Gamma [4].
        \item Weibull \href{https://goo.gl/WMXmQP}{(Wikipedia)}
        \item 3P Weibull \href{https://goo.gl/WMXmQP}{(Wikipedia)}
        \item Beta \href{https://goo.gl/893wzR}{(Wikipedia)}
        \item 3P Beta \href{https://goo.gl/893wzR}{(Wikipedia)}
        \item 4P Beta \href{https://goo.gl/893wzR}{(Wikipedia)}
        \item Beta-Weibull \href{https://goo.gl/dpaG8h}{ReliaWiki}
        \item Generalized Beta \href{https://goo.gl/UcVsct}{(Wikipedia)}
        \item Rayleigh \href{https://goo.gl/d9b3zv}{(Wikipedia)}
        \item Exponential \href{https://goo.gl/stVsi7}{(Wikipedia)}
        \item 2P Exponential \href{https://goo.gl/stVsi7}{(Wikipedia)}
        \item Geometric \href{https://is.gd/94HW4w}{(Wikipedia)}
    }

See \code{\link[stats]{coef}}.
}
\examples{
set.seed(1230)
x1 <- rnorm(10000, mean = 0.5, sd = 1)
cdfp <- fitCDF(x1, distNames = "Normal", plot = FALSE)
summary(cdfp$bestfit)

## Add some cosmetics to the plots
cdfp <- fitCDF(x1, distNames = "Normal", xlabel = "My Nice Variable Label",
               plot = T, font.lab= 3, font=2,font.axis=2, family="serif",
               cex.lab = 1.3, cex.axis = 1.3)

## Fitting a Weibull distribution with 3 paramaters
x1 <- rweibull3p(1000, shape = 0.5, scale = 1, mu = 0.1)
cdfp <- fitCDF(x1, distNames = "3P Weibull",
               xlabel = "My Nice Variable Label",
               plot = T, font.lab= 3, font=2, font.axis=2, family="serif",
               cex.lab = 1.3, cex.axis = 1.3, cex.main = 1.1,
               mgp = c(2.5, 1, 0))
}
\references{
\enumerate{
    \item Stevens JP. Applied Multivariate Statistics for the Social
          Sciences. Fifth Edit. Routledge Academic; 2009.
    \item Andrej-Nikolai Spiess (2014). propagate: Propagation of
          Uncertainty. R package version 1.0-4.
          http://CRAN.R-project.org/package=propagate
    \item Abramowitz, M. and Stegun, I. A. (1972) Handbook of Mathematical
          Functions. New York: Dover. Chapter 6: Gamma and Related Functions.
    \item Hand-book on STATISTICAL DISTRIBUTIONS for experimentalists
          (pag 73) by Christian Walck. Particle Physics Group Fysikum.
          University of Stockholm (e-mail: walck@physto.se).
  }
}
\seealso{
\code{\link[MASS]{fitdistr}} and \code{\link{fitMixDist}} and
    for goodness-of-fit: \code{\link{mcgoftest}}.
}
\author{
Robersy Sanchez (\url{https://genomaths.com}).
}
\keyword{internal}
